@page "/denonciation"
@page "/denonciation/{denonciationId:int?}"
@using API.Resources
@inject DenonciationConsultationService Service
<PageTitle>@Title</PageTitle>
@if (denonciationId == 0)
{
	<div class="row">
		<div class="col-12">
			<h4><span class="oi oi-list"></span> Ajouter une dénonciation</h4>
		</div>
	</div>
	@if (denonciation == null)
	{
		<div class="row">
			<div class="col-6">
				<div class="col-6">
					<button @onclick="@(() => Add())" class="btn btn-sm btnprimary">
						<span class="oi oi-plus"></span>
						Ajouter
					</button>
				</div>
			</div>
		</div>
	}
	else
	{
		<p>Dénonciation créée. Conservez ce lien pour suivre votre dénonciation : <a href="./@denonciation.Id">/@denonciation.Id</a>.</p>
	}
}
else if (denonciation == null)
{
	<p><em>Aucune dénonciation ne possède cet identifiant.</em></p>
}
else
{
	<div class="row">
		<div class="col-12">
			<h4><span class="oi oi-list"></span> Statut de votre dénonciation</h4>
		</div>
	</div>
	@if (denonciation.EstTraitee)
	{
		<p>Votre dénonciation a été traitée, vous pouvez consulter sa réponse ci-dessous.</p>
		<table class="table">
			<thead>
				<tr>
					<th>Date et heure de réponse</th>
					<th>Statut</th>
					<th>Rétribution</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>@denonciation.Reponse.Horodatage</td>
					<td>
						@{
							switch (denonciation.Reponse.Type)
							{
								case 0:
									<text>Non traitée</text>
									break;
								case 1:
									<text>Confirmation</text>
									break;
								case 2:
									<text>Rejet</text>
									break;
							}
						}
					</td>
					<td>@denonciation.Reponse.Retribution €</td>
				</tr>
			</tbody>
		</table>
	}
	else
	{
		<p>Nous avons bien reçu votre dénonciation et celle-ci n'a pas encore été traitée, vous pouvez consulter ses informations ci-dessous. Conservez le lien pour suivre la dénonciation.</p>
	}
	<table class="table">
		<thead>
			<tr>
				<th>Date et heure de création</th>
				<th>Informateur</th>
				<th>Suspect</th>
				<th>Délit</th>
				<th>Pays d'évasion</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@denonciation.Horodatage</td>
				<td>@denonciation.Informateur.Nom.Value @denonciation.Informateur.Prenom.Value</td>
				<td>@denonciation.Suspect.Nom.Value @denonciation.Suspect.Prenom.Value</td>
				<td>
					@{
						switch (denonciation.Delit)
						{
							case Domain.Model.Delit.NONE:
								<text>Non specifié</text>
								break;
							case Domain.Model.Delit.DissimulationDeRevenus:
								<text>Dissimulation de revenus</text>
								break;
							case Domain.Model.Delit.EvasionFiscale:
								<text>Evasion fiscale</text>
								break;
						}
					}
				</td>
				<td>@denonciation.PaysEvasion.Value</td>
			</tr>
		</tbody>
	</table>
}

@code {
	[Parameter] public int denonciationId { get; set; }
	private const string Title = "Dénonciation";
	private DenonciationConsultationAPI? denonciation;
	[CascadingParameter]
	[Inject] public IModalService Modal { get; set; } = default!;
	protected override async Task OnInitializedAsync()
	{
		await FetchData();
	}
	private async Task FetchData()
	{
		denonciation = await Service.GetDenonciationAsync(denonciationId);
	}
	async Task Add()
	{
		var modal = Modal.Show<AjoutDenonciation>("Ajout d'une dénonciation");
		var result = await modal.Result;
		if (!result.Cancelled)
		{
			await FetchData();
			var modalLInk = Modal.Show<LinkDenonciation>("Le numéro de dénonciation est le suivant : " + result.Data);
		}
	}
}